import cv2
import numpy as np
import random

# Load the Haar cascade for face detection
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Define genetic algorithm parameters
POPULATION_SIZE = 50
GENERATIONS = 100
MUTATION_RATE = 0.1

# Function to calculate fitness (number of detected faces)
def calculate_fitness(chromosome, image):
    # Convert chromosome to integer coordinates
    x, y, w, h = chromosome
    x, y, w, h = int(x), int(y), int(w), int(h)

    # Crop the region from the image
    roi = image[y:y+h, x:x+w]

    # Convert the cropped region to grayscale
    gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)

    # Detect faces in the cropped region
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    # Return the number of detected faces as fitness
    return len(faces)

# Function to generate initial population
def generate_population(population_size, image_shape):
    population = []
    height, width, _ = image_shape

    for _ in range(population_size):
        # Randomly generate coordinates for the face region
        x = random.randint(0, width)
        y = random.randint(0, height)
        w = random.randint(20, width - x)
        h = random.randint(20, height - y)
        chromosome = [x, y, w, h]
        population.append(chromosome)

    return population

# Function to perform genetic algorithm
def genetic_algorithm(image):
    population = generate_population(POPULATION_SIZE, image.shape)
    best_chromosome = None
    best_fitness = -1

    for generation in range(GENERATIONS):
        # Evaluate fitness for each chromosome
        fitness_scores = [calculate_fitness(chromosome, image) for chromosome in population]

        # Find the best chromosome in the population
        max_fitness_index = np.argmax(fitness_scores)
        if fitness_scores[max_fitness_index] > best_fitness:
            best_fitness = fitness_scores[max_fitness_index]
            best_chromosome = population[max_fitness_index]

        # Select parents for crossover
        parents = random.choices(population, weights=fitness_scores, k=2)

        # Perform crossover
        crossover_point = random.randint(1, len(parents[0]) - 1)
        child = parents[0][:crossover_point] + parents[1][crossover_point:]

        # Mutate child
        if random.random() < MUTATION_RATE:
            mutated_gene_index = random.randint(0, len(child) - 1)
            mutation_amount = random.randint(-10, 10)
            child[mutated_gene_index] += mutation_amount

        # Replace weakest chromosome with the new child
        weakest_index = np.argmin(fitness_scores)
        population[weakest_index] = child

    return best_chromosome

# Main function
def main():
    # Load image
    image = cv2.imread('test_image.jpg')

    # Perform face detection using genetic algorithm
    best_chromosome = genetic_algorithm(image)

    # Draw rectangle around detected face
    x, y, w, h = best_chromosome
    cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)

    # Display the result
    cv2.imshow('Face Detection', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
